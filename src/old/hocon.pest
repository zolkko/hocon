// The same as in a regular JSON.
WHITESPACE = _{ " " | "\t" }

// Comments does not consume newline character because in some cases they may be used
// as separators between object fields and array elements.
COMMENT    = _{ ("//" | "#") ~ (!(NEWLINE | EOI) ~ ANY)* ~ &(NEWLINE | EOI) }

// Arrays' elements and object fields can be separated by enters or commas.
// But a user can use multiple enters as a separator, or even surround a comma by multiple
// newline characters (sequences).
separator  = _{ ("," ~ NEWLINE*) | (NEWLINE+ ~ ","? ~ NEWLINE*) }

// Special symbols
bool_true  = @{ ^"true" | ^"yes" | ^"y" | ^"t" }
bool_false = @{ ^"false" | ^"no" | ^"n" | ^"f" }
bool       = _{ bool_true | bool_false }

null       = @{ ^"null" }

// Numbers can be either integers or doubles.
int   = @{ "-"? ~ nat }
float = @{ "-"? ~ nat ~ ("." ~ ASCII_DIGIT+ ~ exp? | exp)? }
nat   = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
exp   = @{ ("E" | "e") ~ ("+" | "-")? ~ ASCII_DIGIT+ }

include_file        = { ^"file(" ~ string ~ ")" }
include_url         = { ^"url(" ~ string ~ ")" }
include_classpath   = { ^"classpath(" ~ string ~ ")" }
include_string      = { string }
regular_include     = { include_file | include_url | include_classpath | include_string }
required_include    = { ^"required(" ~ regular_include ~ ")" }
include             = { ^"include" ~ NEWLINE* ~ (required_include | regular_include) }

// Strings
// unquoted_string_end = _{ "//" | NEWLINE | WHITESPACE | "$" | "\"" | "{" | "}" | "[" | "]" | ":" | "=" | "," | "+" | "#" | "`" | "^" | "?" | "!" | "@" | "*" | "&" | "\\" }
unquoted_string_end = _{ "//" | NEWLINE | "$" | "\"" | "{" | "}" | "[" | "]" | ":" | "=" | "," | "+" | "#" | "`" | "^" | "?" | "!" | "@" | "*" | "&" | "\\" }
unquoted_string     = @{ (!unquoted_string_end ~ ANY)+ }

mstring = ${ "\"\"\"" ~ minner ~ "\"\"\"" }
minner  = @{ (!("\"\"\"") ~ ANY)* }
string  = ${ "\"" ~ sinner ~ "\"" }
sinner  = @{ (!("\"" | "\\") ~ ANY)* ~ (escape ~ sinner)? }
escape  = @{ "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | unicode) }
unicode = @{ "u" ~ ASCII_HEX_DIGIT{4} }

// Substitution can be either optional or required. Inside the brackets a variable's name expected.
optional_subs_start   = _{ "${?" }
required_subs_start   = _{ "${" }
subs_end              = _{ "}" }
optional_substitution = { optional_subs_start ~ field_path ~ subs_end }
required_substitution = { required_subs_start ~ field_path ~ subs_end }
substitution          = { optional_substitution | required_substitution }

// A substitution placeholder cannot be inside a raw string.
element_end = _{ NEWLINE | EOI | "//" | "#" | "," | "]" | "}" }

value_chunk = _{
    (null ~ &element_end) |
    (bool ~ &element_end) |
    (int ~ &element_end) |
    (float ~ &element_end) |
    mstring |
    string |
    array |
    object |
    substitution |
    unquoted_string
}
value = { value_chunk ~ (!separator ~ value_chunk)* }

array = { "[" ~ NEWLINE* ~ value ~ (separator ~ value)* ~ (separator)? ~ "]" | "[" ~ NEWLINE* ~ "]" }

// Field name and paths.
path_delimiter   = _{ "." }
field_name       = @{ (!("\"" | ":" | "=" | "+=" | "{" | "}" | "[" | "]" | "," | "." | NEWLINE | WHITESPACE | "#" | "//") ~ ANY)+ }
field_path       = { (string | field_name) ~ (path_delimiter ~ (string | field_name))* }

field_assign     = @{ "=" | ":" }
field_append     = @{ "+=" }
field            = { field_path ~ NEWLINE* ~ (((field_assign | field_append) ~ NEWLINE* ~ value) | object) }

field_or_include = _{ include | field }
object_body      = { field_or_include ~ (separator ~ field_or_include)* ~ separator? }
object           = { "{" ~ NEWLINE* ~ object_body? ~ NEWLINE* ~ "}" }

// Empty documents are forbidden by the hocon specification
root             = { SOI ~ NEWLINE* ~ (array | object | object_body)? ~ NEWLINE* ~ EOI }

// Included documents cannot contain an array as a start element.
include_root     = { SOI ~ NEWLINE* ~ (object | object_body)? ~ NEWLINE* ~ EOI }
